import java.io.*;
import java.util.*;

// 항상 나보다 더 나은 방법이 있다

public class Main {
		
	static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

	static void print(int[] from, int n, int k) { // 목표점에서 from으로 점점 시작점으로 돌아오면서 일치하면 재귀 끝 => 출력은 역순(시작 -> 끝)
		// n : 시작점 , k : 끝점에서 from[]을 통해 시작점으로 go
		if(n != k) {
			print(from, n, from[k]);
		}
		// 재귀적 호출로 역순 출력
		System.out.print(k+" ");
	}
	
	static void bfs(int n, int k, boolean check[], int[] dist, int[] from) {
		
		Queue<Integer> q = new LinkedList<Integer>();
		q.add(n);
		check[n] = true;
		
		while(!q.isEmpty()) {
			int now = q.poll();
			// 이쪽에서 check[] = true;를 해주게 되면 check가 안된 상태로 밑의 연산이 들어가게 되므로 밑에서 check를 진행해야 한다.

			if( now + 1 <= 100000 && !check[now + 1] ) {
				q.add(now + 1);
				dist[now + 1] = dist[now] + 1;
				from[now + 1] = now;
				check[now + 1] = true;
			}
				
			if( now - 1 >= 0 && !check[now - 1] ) {
				q.add(now - 1);
				dist[now - 1] = dist[now] + 1;
				from[now - 1] = now;
				check[now - 1] = true;
			}
							
			if( now * 2 <= 100000 && !check[now * 2] ) {
				q.add(now * 2);
				dist[now * 2] = dist[now] + 1;
				from[now * 2] = now;
				check[now * 2] = true;
			}

		}
	}
	
	public static void main(String[] args) throws IOException {

		StringTokenizer st = new StringTokenizer(br.readLine());
		int n = Integer.parseInt(st.nextToken());
		int k = Integer.parseInt(st.nextToken());
		boolean check[] = new boolean[100001];
		int dist[] = new int[100001];
		int from[] = new int[100001];
		
		bfs(n,k,check,dist,from);
		System.out.println(dist[k]);
		print(from, n, k);
//		for(int i = k; i>=n; i--) {
//			System.out.println(i+" "+ from[i]);
//		}
	}
}
