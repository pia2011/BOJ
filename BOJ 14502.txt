import java.io.*;
import java.util.*;

class Point {
	int r;
	int c;

	Point(int r, int c) {
		this.r = r;
		this.c = c;
	}
}

public class Main {
	// 핵심은 복사하기 행렬
	
	private static final int dx[] = {0,0,1,-1};
	private static final int dy[] = {-1,1,0,0};
	
	private static void solve(int board[][], Queue<Point> q) {
		// 배열 깊은 복사
		int newBoard[][] =	new int[board.length][board[0].length];
		for(int i = 0; i<newBoard.length; i++) {
			System.arraycopy(board[i], 0, newBoard[i], 0, board[0].length);
		}
		// 큐 깊은 복사
		Queue<Point> newQ = new LinkedList();
		newQ.addAll(q);
		
		int bNum = blank; // 빈칸의 개수 
		while(!newQ.isEmpty()) {
			Point p = newQ.poll();
			for(int i = 0; i<4; i++) {			
				int x = p.c + dx[i];
				int y = p.r + dy[i];
				if(x >= 0 && x < M && y >= 0 && y < N) {
					if (newBoard[y][x] == 0) {
						newBoard[y][x] = 2; // 감염
						newQ.add(new Point(y, x));
						bNum--;
					}
				}
			}
		}
		// 감염이 모두 끝나면..	
		if(bNum > max)
			max = bNum;
	}

	private static void makeWall(int board[][], int cnt, int a, int b, Queue q) {
		// 재귀로 모든 벽 3개 배치하는 모든 경우의 수(2차원 배열안에서)
		if (cnt == 3) {
			solve(board, q);			
			return;
		}
		
		for (int i = a; i < N; i++) {
			for (int j = b; j < M; j++) {
				if (board[i][j] == 0) {
					board[i][j] = 1;
					makeWall(board, cnt + 1, i, j, q);
					board[i][j] = 0;
				}
			}
			b = 0;
		}
	}

	private static int N;
	private static int M;
	private static int max = 0;
	private static int blank = 0;
	public static void main(String[] args) throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		int board[][] = new int[N][M];
		Queue<Point> q = new LinkedList();
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < M; j++) {
				int a = Integer.parseInt(st.nextToken());
				board[i][j] = a;
				if (a == 2) {
					q.add(new Point(i, j));					
				}
				if(a == 0)
					blank++;
			}
		}

		// 벽 3개
		// brute force
		// 벽을 세우는 모든 경우를 따져봐야함
		makeWall(board, 0, 0, 0, q);
		System.out.println(max-3);
	}
}